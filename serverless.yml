
service: connect-scheduler

provider:
  name: "aws"
  runtime: "python3.7"
  region: "eu-west-1"
  defaultStage: "dev"
  memorySize: 128
  timeout: 15
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "logs:CreateLogGroup"
        - "logs:CreateLogStream"
        - "logs:PutLogEvents"
      Resource: "*"
    - Effect: "Allow"
      Action: "*"
      Resource: "*"

custom:
  db: "aws-instance-scheduler"
  cors:
    origin: "*"
    headers:
      - Access-Control-Allow-Origin
      - Authorization
      - Content-Type
      - X-Amz-Date
      - X-Amz-Security-Token

resources:
  Resources:
    InstancesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "${self:custom.db}-instances"
        AttributeDefinitions:
          - AttributeName: "instanceId"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "instanceId"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: "1"
          WriteCapacityUnits: "1"
    autoScalingGroupsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "${self:custom.db}-asg"
        AttributeDefinitions:
          - AttributeName: "asgName"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "asgName"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: "1"
          WriteCapacityUnits: "1"

functions:
  addPAS:
    handler: "app.add.lambda_handler"
    description: "Add period/schedule/backup to DB"
    environment:
      db: "${self:custom.db}"
    events:
      - http:
          path: "pas"
          method: "post"
          cors: "${self:custom.cors}"
  removePAS:
    handler: "app.remove.lambda_handler"
    description: "Remove period/schedule/backup from DB"
    environment:
      db: "${self:custom.db}"
    events:
      - http:
          path: "pas"
          method: "delete"
          cors: "${self:custom.cors}"
  getPAS:
    handler: "app.get.lambda_handler"
    description: "Get period/schedule/backup from DB"
    environment:
      db: "${self:custom.db}"
    events:
      - http:
          path: "get/pas"
          method: "post"
          cors: "${self:custom.cors}"
  modifyPAS:
    handler: "app.modify.lambda_handler"
    description: "Modify period/schedule/backup in DB"
    environment:
      db: "${self:custom.db}"
    events:
      - http:
          path: "modify/pas"
          method: "post"
          cors: "${self:custom.cors}"
  putInstances:
    handler: "app.put_instances.lambda_handler"
    description: "Put instances"
    environment:
      db: "${self:custom.db}"
      ec2keys: "State,Tags"
      instancesDB: "${self:custom.db}-instances"
      region: "eu-west-1"
    events:
      - http:
          path: "pas/instances"
          method: "post"
          cors: "${self:custom.cors}"
  getInstances:
    handler: "app.get_instances.lambda_handler"
    description: "Get instances"
    environment:
      db: "${self:custom.db}"
      ec2keys: "State,Tags"
      instancesDB: "${self:custom.db}-instances"
      region: "eu-west-1"
    events:
      - http:
          path: "pas/instances"
          method: "get"
          cors: "${self:custom.cors}"
  putAutoscaling:
    handler: "app.put_auto_scaling.lambda_handler"
    description: "Put auto scaling groups"
    environment:
      db: "${self:custom.db}"
      asgkeys: "Instances,Tags"
      asgDB: "${self:custom.db}-asg"
      region: "eu-west-1"
    events:
      - http:
          path: "pas/autoscaling"
          method: "post"
          cors: "${self:custom.cors}"